<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"></property>
	</bean> -->
	<bean id="masterDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://192.168.198.129:3306/test"></property>
		<property name="username" value="root"></property>
		<property name="password" value="1704"></property>
		<!-- 初始化连接 -->  
		<property name="maxActive" value="10"/>
		<!-- 最大连接 -->
		<property name="maxIdle" value="500"/>
		<!-- 连接池最小空闲连接 -->
		<property name="minIdle" value="5" />
		<!-- 获取连接最大等待时间,超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->
		<property name="maxWait" value="60000" />
		
		<!-- SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,
则查询必须是一个SQL SELECT并且必须返回至少一行记录 -->
			<property name= "validationQuery" value="select 1"/>
		<!--连接空闲时是否进行有效性验证（即是否还和数据库连通的）-->
			<property name= "testWhileIdle" value="true"/>
			<!--取得连接时是否进行有效性验证（即是否还和数据库连通的）-->
			<property name= "testOnBorrow" value="false"/>
			<!--返回连接时是否进行有效性验证（即是否还和数据库连通的）-->
			<property name= "testOnReturn" value="false"/>
			
			<!-- 他们两个配合，可以持续更新连接池中的连接对象，当timeBetweenEvictionRunsMillis 大于0时
			每过timeBetweenEvictionRunsMillis 时间，就会启动一个线程，校验连接池中闲置时间超过minEvictableIdleTimeMillis的连接对象.
			配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="25200000" />
			
			<!--是否自动回收超时连接 -->
			<property name="removeAbandoned" value="true" />
			<!--超时时间(以秒数为单位),1800秒，也就是30分钟 -->
			<property name="removeAbandonedTimeout" value="1800" />	
			<!-- 关闭abanded连接时输出错误日志 -->
			<property name="logAbandoned" value="true" />
	</bean>
	
<!-- 	数据源2从库（读） -->
	<bean id="slave01DataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://192.168.198.128:3306/test"></property>
		<property name="username" value="root"></property>
		<property name="password" value="1704"></property>
		<!-- 初始化连接 -->  
		<property name="maxActive" value="10"/>
		<!-- 最大连接 -->
		<property name="maxIdle" value="500"/>
		<!-- 连接池最小空闲连接 -->
		<property name="minIdle" value="5" />
		<!-- 获取连接最大等待时间,超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->
		<property name="maxWait" value="60000" />
		
		<!-- SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,
则查询必须是一个SQL SELECT并且必须返回至少一行记录 -->
			<property name= "validationQuery" value="select 1"/>
		<!--连接空闲时是否进行有效性验证（即是否还和数据库连通的）-->
			<property name= "testWhileIdle" value="true"/>
			<!--取得连接时是否进行有效性验证（即是否还和数据库连通的）-->
			<property name= "testOnBorrow" value="false"/>
			<!--返回连接时是否进行有效性验证（即是否还和数据库连通的）-->
			<property name= "testOnReturn" value="false"/>
			
			<!-- 他们两个配合，可以持续更新连接池中的连接对象，当timeBetweenEvictionRunsMillis 大于0时
			每过timeBetweenEvictionRunsMillis 时间，就会启动一个线程，校验连接池中闲置时间超过minEvictableIdleTimeMillis的连接对象.
			配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="25200000" />
			
			<!--是否自动回收超时连接 -->
			<property name="removeAbandoned" value="true" />
			<!--超时时间(以秒数为单位),1800秒，也就是30分钟 -->
			<property name="removeAbandonedTimeout" value="1800" />	
			<!-- 关闭abanded连接时输出错误日志 -->
			<property name="logAbandoned" value="true" />
	</bean>
	<!-- 定义数据源，使用自己实现的数据源 -->  
    <bean id="dataSource" class="com.bgs.ReadWrite.DynamicDataSource">  
        <!-- 设置多个数据源 -->  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <!-- 这个key需要和程序中的key一致 -->  
                <entry key="master" value-ref="masterDataSource"/>  
                <entry key="slave" value-ref="slave01DataSource"/>  
            </map>  
        </property>  
        <!-- 设置默认的数据源，这里默认走写库 -->  
        <property name="defaultTargetDataSource" ref="masterDataSource"/>  
    </bean> 
	<bean id="sqlSesionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<!-- 	2.MapperScannerConfigurer递归扫描基准包下所有接口，若它们在SQL映射文件中定义过，则动态注册为MapperFactoryBean，如此即可批量产生映射器实现类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bgs.mapper"></property>
	</bean>
	<context:component-scan base-package="com.bgs"/>
	
<!-- 	1.配置事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
<!-- 	<tx:annotation-driven transaction-manager="txManager"/> -->
	<!-- 定义事务策略 -->  
    <tx:advice id="txAdvice" transaction-manager="txManager">  
        <tx:attributes>  
            <!--定义查询方法都是只读的 -->  
            <tx:method name="query*" read-only="true" />  
            <tx:method name="find*" read-only="true" />  
            <tx:method name="get*" read-only="true" />  
  
            <!-- 主库执行操作，事务传播行为定义为默认行为 -->  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <!--其他方法使用默认事务策略 -->  
            <tx:method name="*" />  
        </tx:attributes>  
    </tx:advice> 
    
    <!-- 定义AOP切面处理器 -->  
    <bean class="com.bgs.ReadWrite.DataSourceAspect" id="dataSourceAspect" />  
    <aop:config>  
        <!-- 定义切面，所有的service的所有方法 -->  
        <aop:pointcut id="txPointcut" expression="execution(* com.bgs.service.*.*(..))" />  
        <!-- 应用事务策略到Service切面 -->  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>  
          
        <!-- 将切面应用到自定义的切面处理器上，-9999保证该切面优先级最高执行 -->  
        <aop:aspect ref="dataSourceAspect" order="-9999">  
            <aop:before method="before" pointcut-ref="txPointcut" />  
        </aop:aspect>  
    </aop:config> 
	
</beans>
